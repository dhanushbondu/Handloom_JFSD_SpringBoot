import React, { useEffect, useState } from "react";
import Navbar from './Navbar';
import axios from "axios";
import { useNavigate } from "react-router-dom"; // Import useNavigate

import './Cart.css';

function Cart() {
  const navigate = useNavigate();
  const [cartItems, setCartItems] = useState([]);
  const [totalPrice, setTotalPrice] = useState(0);
  const [error, setError] = useState("");
  const [loading, setLoading] = useState(false);
  const username = localStorage.getItem("username");

  useEffect(() => {
    if (username) {
      fetchCartItems();
    } else {
      setError("Please log in to view your cart.");
    }
  }, [username]);

  const fetchCartItems = async () => {
    setLoading(true);
    setError("");
    try {
      const response = await axios.get("/cart/items", { params: { username } });
      if (response.data && response.data.length > 0) {
        setCartItems(response.data);
        calculateTotalPrice(response.data);
      } else {
        setError("Your cart is empty.");
        setCartItems([]);
      }
    } catch (err) {
      setError("Failed to load cart items. Please try again later.");
    } finally {
      setLoading(false);
    }
  };

  const calculateTotalPrice = (items) => {
    const total = items.reduce((sum, item) => sum + item.price * item.quantity, 0);
    setTotalPrice(total);
  };

  // Handle increment of quantity
  const handleIncrement = async (itemId) => {
    try {
      const response = await axios.put("/cart/increment", {
        username: username,
        id: itemId
      });
      
      if (response.status === 200) {
        fetchCartItems();
      }
    } catch (err) {
      setError("Error incrementing quantity. Please try again.");
    }
  };

  // Handle decrement of quantity
  const handleDecrement = async (itemId) => {
    try {
      const response = await axios.put("/cart/decrement", {
        username: username,
        id: itemId
      });

      if (response.status === 200) {
        fetchCartItems(); 
      }
    } catch (err) {
      setError("Error decrementing quantity. Please try again.");
    }
  };

  // Handle delete item from the cart
  const handleDelete = async (itemId) => {
    try {
      const response = await axios.delete("/cart/delete", {
        params: { uname: username, productId: itemId }
      });

      if (response.status === 200) {
        fetchCartItems(); // Re-fetch the updated cart items
      }
    } catch (err) {
      setError("Error deleting cart item. Please try again.");
    }
  };

  const handleBuyNow = async () => {
    try {
      setLoading(true);
  
      // Request backend to create a Razorpay order
      const response = await axios.post("/payment/create-order", {
        uname: username, // Send username
        price: totalPrice, // Send the total amount for the order
      });
  
      if (response.data && response.data.razorpayOrderId) {
        const razorpayOrderId = response.data.razorpayOrderId;
  
        // Initialize Razorpay checkout
        const razorpayOptions = {
          key: "rzp_test_jFjFOukkt6cGSG", // Your Razorpay Key ID
          amount: totalPrice * 100, // Amount in paise
          currency: "INR",
          order_id: razorpayOrderId, // The order ID generated by your backend
          handler: async function (response) {
            const verificationResponse = await axios.post("/payment/verify-signature", {
              razorpayOrderId,
              razorpayPaymentId: response.razorpay_payment_id,
              razorpaySignature: response.razorpay_signature,
            });
  
            if (verificationResponse.data === "Payment Verified") {
              // Payment is successful, now delete the cart items
              // Loop through the cart items and delete them individually
              for (const item of cartItems) {
                await deleteCartItem(item.id); 
              }
              navigate("/signin/users/home"); // Redirect to home page after payment
              alert("Payment successful! Your order has been placed.");
            } else {
              setError("Payment verification failed. Please try again.");
              alert("Payment verification failed. Please try again.");
            }
          },
          prefill: {
            name: username,
          },
          theme: {
            color: "#F37254",
          },
        };
  
        const rzp = new window.Razorpay(razorpayOptions);
        rzp.open();
      } else {
        setError("Failed to create Razorpay order. Please try again.");
        alert("Failed to create Razorpay order. Please try again.");
      }
    } catch (err) {
      console.error(err); // Log the error to debug further
      setError("Error initiating payment. Please try again.");
      alert("Error initiating payment. Please try again.");
    } finally {
      setLoading(false);
    }
  };
  
  // Function to delete an individual cart item by its ID
  const deleteCartItem = async (itemId) => {
    try {
      await axios.delete("/cart/delete", {
        params: { uname: username, productId: itemId }, 
      });
      console.log(`Product with ID ${itemId} deleted successfully.`);
    } catch (err) {
      console.error(`Error deleting product with ID ${itemId}:`, err);
    }
  };
  
  // Function to delete all cart items after successful payment
  const deleteCartItems = async () => {
    try {
      await axios.delete("/cart/delete", {
        params: { uname: username, productId: 0 }, // Pass 0 as productId to delete all items
      });
      setCartItems([]); // Clear the cart in the frontend
    } catch (err) {
      console.error("Error deleting cart items: ", err);
    }
  };

  return (
    <>
      <Navbar />
      <div className="cart-page">
        <div className="cart-container">
          <div className="cart-items-section">
            <h1>Your Cart</h1>
            {error && <p className="error-message">{error}</p>}
            {loading ? (
              <p>Loading...</p>
            ) : cartItems.length === 0 ? (
              <p>Your cart is empty.</p>
            ) : (
              <div>
                <div className="cart-items-list">
                  {cartItems.map((item) => (
                    <div key={item.id} className="cart-item">
                      <img src={`data:image/jpeg;base64,${item.img}`} alt={item.name} />
                      <div className="cart-item-details">
                        <h3>{item.name}</h3>
                        <p>₹{item.price}</p>
                        <div className="quantity-selector">
                          <button onClick={() => handleDecrement(item.id)}>-</button>
                          <input
                            type="number"
                            value={item.quantity}
                            readOnly
                          />
                          <button onClick={() => handleIncrement(item.id)}>+</button>
                        </div>
                        <button className="delete-button" onClick={() => handleDelete(item.id)}>
                          Delete
                        </button>
                      </div>
                    </div>
                  ))}
                </div>
                <div className="cart-summary">
                  <h3>Total Price: ₹{totalPrice.toFixed(2)}</h3>
                  <button 
                    className="buy-now-button" 
                    onClick={handleBuyNow}
                    disabled={loading || totalPrice === 0}
                  >
                    {loading ? 'Processing...' : 'Buy Now'}
                  </button>
                </div>
              </div>
            )}
          </div>
        </div>
      </div>
    </>
  );
}

export default Cart;
