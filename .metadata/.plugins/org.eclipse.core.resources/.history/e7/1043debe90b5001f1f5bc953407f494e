package com.klef.server.service;

import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.klef.server.entity.Users;
import com.klef.server.repo.UserRepo;

@Service
public class UserServiceLogic implements UserService {

    @Autowired
    private UserRepo userrepo;

    @Override
    public String insertUser(Users user) {
        try {
            // Check if user already exists by uname
            if (userrepo.existsById(user.getUname())) {
                return "Username already exists. Please choose a different one.";
            }
            userrepo.save(user);
            return "User inserted successfully...";
        } catch (Exception e) {
            return "User insertion failed. Error: " + e.getMessage();
        }
    }

    @Override
    public String checkUser(Users user, String uname, String pwd) {
        try {
            Optional<Users> u = userrepo.findById(uname);
            if (u.isEmpty()) {
                return "User not found. Please check the username.";
            } else {
                if (u.get().getPwd().equals(pwd)) {
                    return "Login successful...";
                } else {
                    return "Invalid password. Please try again.";
                }
            }
        } catch (Exception e) {
            return "Error occurred during login attempt. Please try again.";
        }
    }

    @Override
    public long getUserCount() {
        return userrepo.count(); // Fetch the total count of users from the database
    }

    @Override
    public List<Users> getAllUsers() {
        try {
            return userrepo.findAll(); // Fetch all users from the database
        } catch (Exception e) {
            return null; // Handle error appropriately (e.g., log the error)
        }
    }

    @Override
    public void deleteUser(String uname) {
        try {
            Optional<Users> user = userrepo.findById(uname);
            if (user.isPresent()) {
                userrepo.delete(user.get()); // Delete the user by uname
            }
        } catch (Exception e) {
            // Handle exception (e.g., log the error)
        }
    }

    @Override
    public Users updateUser(String uname, Users user) {
        try {
            Optional<Users> existingUser = userrepo.findById(uname);
            if (existingUser.isPresent()) {
                Users updatedUser = existingUser.get();
                // Update the user's details
                updatedUser.setEmail(user.getEmail());
                updatedUser.setGender(user.getGender());
                updatedUser.setPwd(user.getPwd());
                return userrepo.save(updatedUser); // Save the updated user
            }
            return null; // Return null if user not found
        } catch (Exception e) {
            // Handle exception (e.g., log the error)
            return null;
        }
    }
}
