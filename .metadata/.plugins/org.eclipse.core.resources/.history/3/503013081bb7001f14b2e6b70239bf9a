package com.klef.server.controller;

import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
//import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.klef.server.entity.Users;
import com.klef.server.service.UserService;

@RestController
@RequestMapping("/users")
public class UserController {
	
	@Autowired
	private UserService userserice;
	
	@PostMapping("/insert-user")
	public ResponseEntity<String> insertData(@RequestBody Users user) {
	    try {
	        System.out.println(user.getUname());
	        String res = userserice.insertUser(user);
	        if (res.contains("Username already exists")) {
	            return ResponseEntity.status(HttpStatus.CONFLICT).body(res); // 409 Conflict
	        }
	        return ResponseEntity.status(HttpStatus.CREATED).body(res); // 201 Created
	    } catch (Exception e) {
	        return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("Error occurred while inserting user.");
	    }
	}

	
	
	@PostMapping("/login")
	public ResponseEntity<String> loginUser(@RequestBody Users user) {
	    String result = userserice.checkUser(user, user.getUname(), user.getPwd());
	    if (result.equals("Login successful...")) {
	        return ResponseEntity.ok(user.getUname()); // Return username on successful login
	    } else {
	        return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body(result); // Unauthorized response
	    }
	}
	
    @GetMapping("/users-count")
    public long getUserCount() {
        return userserice.getUserCount(); // Fetch the user count from the service
    }
	
    @GetMapping("/userslist")
    public List<Users> getUsers() {
        return userserice.getAllUsers();  
    }
    
    @DeleteMapping("/deleteusers/{uname}")
    public ResponseEntity<String> deleteUser(@PathVariable String uname) {
        try {
            userserice.deleteUser(uname);
            return ResponseEntity.ok("User deleted successfully.");
        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                                 .body("Failed to delete user: " + e.getMessage());
        }
    }

    @PutMapping("/users/{id}")
    public Users updateUser(@PathVariable Long id, @RequestBody Users user) {
        return userserice.updateUser(id, user);  // Update user details by ID
    }
    
    @GetMapping("/gender-count")
    public ResponseEntity<Map<String, Long>> getGenderCount() {
        Map<String, Long> genderCount = new HashMap<>();
        genderCount.put("Male", userserice.getUserCountByGender("Male"));
        genderCount.put("Female", userserice.getUserCountByGender("Female"));
        return ResponseEntity.ok(genderCount);
    }


}
