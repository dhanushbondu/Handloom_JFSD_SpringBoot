package com.klef.server.service;

import java.util.List;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import com.klef.server.entity.Users;
import com.klef.server.repo.UserRepo;

@Service
public class UserServiceLogic implements UserService {

    @Autowired
    private UserRepo userrepo;

    @Override
    public String insertUser(Users user) {
        try {
            // Check if user already exists by username
            if (userrepo.existsByUname(user.getUname())) {
                return "Username already exists. Please choose a different one.";
            }
            userrepo.save(user); // Save the new user to the database
            return "User inserted successfully...";
        } catch (Exception e) {
            return "User insertion failed. Error: " + e.getMessage();
        }
    }

    @Override
    public String checkUser(Users user, String uname, String pwd) {
        try {
            Users u = userrepo.findByUname(uname); // Use findByUname method
            if (u == null) {
                return "User not found. Please check the username.";
            } else {
                // In a real-world scenario, passwords should be hashed, not plain text
                if (u.getPwd().equals(pwd)) {
                    return "Login successful...";
                } else {
                    return "Invalid password. Please try again.";
                }
            }
        } catch (Exception e) {
            return "Error occurred during login attempt. Please try again.";
        }
    }

    @Override
    public long getUserCount() {
        return userrepo.count(); // Return the total number of users in the database
    }

    @Override
    public List<Users> getAllUsers() {
        return userrepo.findAll(); // Fetch all users from the database
    }

    @Override
    public void deleteUser(Long id) {
        try {
            // Check if user exists by ID, then delete
            if (userrepo.existsById(id)) {
                userrepo.deleteById(id);
            } else {
                throw new RuntimeException("User not found with id: " + id);
            }
        } catch (Exception e) {
            throw new RuntimeException("Error occurred while deleting the user: " + e.getMessage());
        }
    }

    @Override
    public Users updateUser(Long id, Users user) {
        try {
            // Check if the user exists by ID
            if (userrepo.existsById(id)) {
                user.setId(id); // Set the ID of the user to preserve it during update
                return userrepo.save(user); // Save the updated user
            } else {
                throw new RuntimeException("User not found with id: " + id);
            }
        } catch (Exception e) {
            throw new RuntimeException("Error occurred while updating the user: " + e.getMessage());
        }
    }
}
